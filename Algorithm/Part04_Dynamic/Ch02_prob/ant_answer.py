# 왼쪽부터 차례대로 식량창고를 턴다고 했을 때
# 특정한 I번째 식량창고에 대해서 털지 안 털지의 여부를 결정하면
# 여러 가지 경우 중에서 더 많은 식량을 털 수 있는 경우를 선택하면 된다.

# a(i) = i번째 식량창고까지의 최적의 해 (얻을 수 있는 식량의 최댓값)
# k(i) = i번째 식량창고에 있는 식량의 양
# 점화식 : a(i) = max[a(i-1), a(i-2) + k(i)]
# 한 칸 이상 떨어진 식량창고는 항상 털 수 있으므로 (i-3)번째 이하는 고려할 필요가 없음

n = int(input())
array = list(map(int, input().split()))

d = [0] * 100

# 다이나믹 프로그래밍 진행 (바텀업)
d[0] = array[0]
d[1] = max(array[0], array[1])
for i in range(2, n):
    d[i] = max(d[i-1], d[i-2] + array[i])
    
print(d[n - 1])